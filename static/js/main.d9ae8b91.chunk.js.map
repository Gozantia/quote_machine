{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","RandomQuote","quotes","state","length","index","Math","floor","random","setState","quote","author","fetch","respuesta","json","data","this","tweetURL","className","id","class","target","rel","href","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0OAIqBA,E,kDACnB,aAAc,IAAD,8BACX,gBAqBFC,YAAc,WAAO,IACXC,EAAW,EAAKC,MAAhBD,OACR,GAAGA,EAAOE,OAAS,EAAG,CACpB,IAAMC,EAAQC,KAAKC,MAAMD,KAAKE,SAAWN,EAAOE,QAChD,EAAKK,SAAS,CACZJ,YAzBJ,EAAKF,MAAQ,CACXD,OAAQ,CACN,CACEQ,MAAO,yDACPC,OAAQ,aAEZN,MAAO,GARE,E,wLAcC,yI,SACYO,MADZ,0I,cACPC,E,gBACYA,EAAUC,O,OAAvBC,E,OACAC,KAAKP,SAAS,CACZP,OAAQa,EAAKb,QAEbc,KAAKf,a,qIAYH,IAAD,EAEmBe,KAAKb,MACzBO,EAHC,EAECR,OAFD,EAESG,OAEVY,EAAQ,gDAA4CP,EAAMA,MAAlD,cAA6DA,EAAMC,QAEjF,OACE,yBAAKO,UAAU,4DACf,yBAAKA,UAAU,iCAAiCC,GAAG,aAC7C,6BACE,wBAAIA,GAAG,OAAOC,MAAM,aACjBV,EAAMA,OAET,0BAAMQ,UAAU,qBAAqBC,GAAG,UAAxC,KACKT,EAAMC,SAIjB,yBAAKO,UAAU,kCACb,uBAAGA,UAAU,yBACXG,OAAO,SAASC,IAAI,sBAAsBC,KAAMN,EAAUE,GAAG,eAC7D,uBAAGD,UAAU,kBAFf,YAKA,4BAAQA,UAAU,yBAChBM,QAASR,KAAKf,YAAakB,GAAG,aAC9B,uBAAGD,UAAU,iBAFf,kC,GAzDuBO,a,MCQbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KAEE,kBAAC,EAAD,OAEFC,SAASC,eAAe,QDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d9ae8b91.chunk.js","sourcesContent":["\nimport React, { Component } from 'react'\n\n\nexport default class App extends Component {\n  constructor(){\n    super()\n    this.state = {\n      quotes: [\n        {\n          quote: \"Si la vida te da limones, aprende hacer huevos fritos.\",\n          author: \"El Chavo\"\n        }],\n      index: 0\n    } \n   }\n\n   async componentDidMount (){\n    // llamado al API\n    const API = 'https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json';\n    let  respuesta =  await fetch(API)\n    let data = await respuesta.json();\n        this.setState({\n          quotes: data.quotes\n        },\n          this.RandomQuote);\n    };\n  RandomQuote = () => {\n    const { quotes } = this.state;\n    if(quotes.length > 0) {\n      const index = Math.floor(Math.random() * quotes.length);\n      this.setState({\n        index\n      })\n    }\n  }\n  \n  render() {\n  \n    const { quotes, index } = this.state;\n    const quote = quotes[index];\n    const tweetURL = `https://twitter.com/intent/tweet?text=${quote.quote} - ${quote.author}`;\n    \n    return (\n      <div className=\"wrapper d-flex align-items-center justify-content-center\">\n      <div className=\"col-6 box p-4 rounded bg-white\" id=\"quote-box\">\n            <div>\n              <h5 id=\"text\" class=\"display-4\">\n                {quote.quote}\n              </h5>\n              <cite className=\"d-block text-right\" id=\"author\">\n                - {quote.author}\n              </cite>\n            </div>\n\n        <div className=\"d-flex justify-content-between\">\n          <a className=\"btn btn-sm btn-primary\" \n            target=\"_blank\" rel=\"noopener noreferrer\" href={tweetURL} id=\"tweet-quote\">\n            <i className=\"fa fa-twitter\"></i> Tuitear\n          </a>\n          \n          <button className=\"btn btn-sm btn-warning\" \n            onClick={this.RandomQuote} id=\"new-quote\">\n            <i className=\"fa fa-random\"></i> Generar cita aleatoria\n          </button>\n        </div>\n      </div>\n    </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'font-awesome/css/font-awesome.min.css';\nimport * as serviceWorker from './serviceWorker';\nimport'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(\n  <React.StrictMode>\n  \n    <App />\n  </React.StrictMode>,\n  document.getElementById('app')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}